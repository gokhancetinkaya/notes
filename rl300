add all output during installation

test performance without observability, watching things cost resources

-

Canonical stack:
Ubuntu 24.04
MicroK8s 1.30
Kubeflow ?

Additional components:
AI optimized TensorFlow ?
YOLOv8 demo stack

Ampere ?

Create custom image?

Deployment:
Install and update ubuntu
Install microk8s
Deploy yolo

-

Deploy yolo

yolov8-k8s-deployment-v1-4.yaml
	
kubectl apply -f yolov8-k8s-deployment-v1-4.yaml


---

Install and update Ubuntu 24.04

# Download and install Ubuntu 24.04

# Update system
sudo apt update && sudo apt upgrade -y

Install MicroK8s

# Install MicroK8s package:
sudo snap install microk8s --channel=1.31-strict/stable

# Add your user to the `microk8s` group for unprivileged access:
sudo adduser $USER snap_microk8s

## unnecessary, no kube directory
# Give your user permissions to read the ~/.kube directory:
sudo chown -f -R $USER ~/.kube

# Wait for MicroK8s to finish initialising:
sudo microk8s status --wait-ready

## dns enabled by default
# Enable the 'storage' and 'dns' addons:
# (required for the Juju controller)
#sudo microk8s enable hostpath-storage dns
sudo microk8s enable hostpath-storage

# Alias kubectl so it interacts with MicroK8s by default:
sudo snap alias microk8s.kubectl kubectl

# Ensure your new group membership is apparent in the current terminal:
# (Not required once you have logged out and back in again)
newgrp snap_microk8s

Enable Kubernetes Dashboard

# Enable ingress addon
sudo microk8s enable ingress

# Enable dashboard addon
sudo microk8s enable dashboard

# Retrieve token to access the Kubernetes dashboard
microk8s kubectl describe secret -n kube-system microk8s-dashboard-token

# Apply Ingress yaml file for Kubernetes dashboard
cat << EOF > dashboard-ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: ingress-kubernetes-dashboard
  namespace: kube-system
  generation: 1
  annotations:
    kubernetes.io/ingress.class: public
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/configuration-snippet: | 
      chunked_transfer_encoding off;
    nginx.ingress.kubernetes.io/proxy-body-size: '0'
    nginx.ingress.kubernetes.io/proxy-ssl-verify: 'off'
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/server-snippet: | 
      client_max_body_size 0;
spec:
  rules:
    - host: console.microk8s.hhii.hpe
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kubernetes-dashboard
                port:
                  number: 443
EOF

kubectl apply -f dashboard-ingress.yaml

kubectl -n kube-system get service/kubernetes-dashboard -o go-template={{.spec.clusterIP}}

Access dashboard web UI via https://console.microk8s.hhii.hpe/#/login and click “Advanced” tab to process

Enter the token created in the previous step

Enable Observability

# Enable observability addon
sudo microk8s enable observability

# Patch observability addon
kubectl patch ds kube-prom-stack-prometheus-node-exporter --type "json" -p '[{"op": "remove", "path" : "/spec/template/spec/containers/0/volumeMounts/2/mountPropagation"}]' -n observability

cat << EOF > obs-ingress.yaml
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: grafana-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: "public"
    nginx.ingress.kubernetes.io/rewrite-target: / #new
spec:
  rules:
  - host: "grafana.microk8s.hhii.hpe"
    http:
      paths:
      - backend:
          service:
            name: kube-prom-stack-grafana
            port:
              number: 3000
        path: /
        pathType: Prefix

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: prometheus-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: "public"
    nginx.ingress.kubernetes.io/rewrite-target: / #new
spec:
  rules:
  - host: "prometheus.microk8s.hhii.hpe"
    http:
      paths:
      - backend:
          service:
            name: kube-prom-stack-kube-prome-prometheus
            port:
              number: 9090
        path: /
        pathType: Prefix

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: alertmanager-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: "public"
    nginx.ingress.kubernetes.io/rewrite-target: / #new
spec:
  rules:
  - host: "alertmanager.microk8s.hhii.hpe"
    http:
      paths:
      - backend:
          service:
            name: kube-prom-stack-kube-prome-alertmanager
            port:
              number: 9093
        path: /
        pathType: Prefix
EOF

kubectl -n observability apply -f obs-ingress.yaml

Access them on the browser with credentials (user/pass: admin/prom-operator) via the links below:
a. Grafana: http://grafana.microk8s.hhii.hpe
b. Prometheus: http://prometheus.microk8s.hhii.hpe
c. Alert Manager: http://alertmanager.microk8s.hhii.hpe

Grafana:
Click Dashboard → Manage → Default → “Kubernetes / Compute Resources / Namespace (Workloads). It will show the workloads in
namespace default

Deploy YOLOv8 Inference Demo

cat << EOF > yolov8-k8s-deployment-v1-4.yaml
kind: Service
apiVersion: v1
metadata:
  name: yolov8-app1-svc
  labels:
    app: yolov8-app1
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  selector:
    app: yolov8-app1
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yolov8-app1
spec:
  selector:
    matchLabels:
      app: yolov8-app1
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        # Label is used as selector in the service.
        app: yolov8-app1
    spec:
      containers:
      - name: yolov8-app1
        image: ghcr.io/amperecomputingai/yolo-live-demo:1.3.0.6-yolov8-gradio
        env:
        - name: GRADIO_SERVER_NAME
          value: "0.0.0.0"
        - name: GRADIO_SERVER_PORT
          value: "5000"
        - name: NUM_THREADS
          value: "16"
        - name: VIDEO_SRC
          value: ""
        ports:
        - containerPort: 5000
          name: yolov8-app1
        resources:
          limits:
            cpu: "128"
          requests:
            cpu: "64"
        volumeMounts:
        - mountPath: /dev/video0
          name: dev-video0
        securityContext:
          privileged: true
      volumes:
      - name: dev-video0
        hostPath:
          path: /dev/video0
            #nodeSelector:
            #accept-pod: yolov8-app
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: yolov8-app-ingress
  annotations:
    kubernetes.io/ingress.class: public
spec:
  rules:
  - host: "ai.microk8s.hhii.hpe"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: yolov8-app1-svc
            port:
              number: 80
 EOF

kubectl apply -f yolov8-k8s-deployment-v1-4.yaml


































Install and configure Juju
# Install Juju:
sudo snap install juju --channel=3.5/stable

# Since the juju package is strictly confined, you also need to manually create a path:
mkdir -p ~/.local/share

# Configure MicroK8s to work properly with Juju (Share the MicroK8s config with Juju)
#Note: Command “microk8s config” retrieves the client’s Kubernetes config which is then registered to Juju Kubernetes endpoints.
microk8s config | juju add-k8s microk8s-1 --client

# Deploy Juju controller to MicroK8s
juju bootstrap microk8s

Install COS / observability

For the COS Lite bundle deployment to go smoothly, make sure the following MicroK8s addons are enabled: dns, hostpath-storage and metallb.

dns is enabled by default, and we have already enabled hostpath-storage for Juju.

The bundle comes with Traefik to provide ingress, for which the metallb addon should be enabled:
IP=$(hostname -I | awk '{print $1}')
sudo microk8s enable metallb:"$IP-$IP"

# To wait for all the addons to be rolled out:
microk8s kubectl rollout status deployments/hostpath-provisioner -n kube-system -w
microk8s kubectl rollout status deployments/coredns -n kube-system -w
microk8s kubectl rollout status daemonset.apps/speaker -n metallb-system -w

If you have an HTTP proxy configured, you will need to give this information to MicroK8s. See the proxy docs for details.

By default, MicroK8s will use 8.8.8.8 and 8.8.4.4 as DNS servers, which can be adjusted. See the dns docs for details.

# Create a dedicated model for the COS Lite bundle.
juju add-model cos

# Deploy the bundle with:
juju deploy cos-lite --trust

# Check juju status until all apps become active
# watch --color juju status --color --relations
#watch -c 'juju status --color | grep -E "blocked|error|maintenance|waiting|App|Unit"'
watch -c juju status --color

# You can also check the deployment of pods
watch kubectl get all -n cos

